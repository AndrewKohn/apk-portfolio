import HtmlIcon from '../assets/svg/languages/HtmlIcon';
import CssIcon from '../assets/svg/languages/CssIcon';
import JavaScriptIcon from '../assets/svg/languages/JavaScriptIcon';
import TypeScriptIcon from '../assets/svg/languages/TypeScriptIcon';
import ReactIcon from '../assets/svg/languages/ReactIcon';
import JavaIcon from '../assets/svg/languages/JavaIcon';
import PythonIcon from '../assets/svg/languages/PythonIcon';
import NodeJSIcon from '../assets/svg/languages/NodeJSIcon';
import SassIcon from '../assets/svg/languages/SassIcon';
import GitIcon from '../assets/svg/languages/GitIcon';
import MySQLIcon from '../assets/svg/languages/MySQLIcon';
import TailwindIcon from '../assets/svg/languages/TailwindIcon';

// Project Images
import projectImage1 from '../assets/img/payroll-sorter-image.webp';
import projectImage2 from '../assets/img/pdf-word-converter-image.webp';
import projectImage3 from '../assets/img/mh-weakener-bot-image.gif';
import projectImage4 from '../assets/img/mgh-menu-image.webp';
import projectImage5 from '../assets/img/gpt-discord-chatbot.png';
// import projectImage6 from '../assets/img/';
import projectImagePlaceholder from '../assets/img/mgh-schedule.gif';

// EXAMPLE DATA
// {
//   id: 5,
//   image: projectImagePlaceholder,
//   altText: 'exampleTitle',
//   title: 'exampleTitle',
//   description: 'exampleText',
//   tags: [],
//   gitHubPath: '',
//   liveSitePath: '',
//   moreInfo: {
//     purpose: ['purposeText'],
//     functionality: ['functionalityText'],
//     challenge: ['challengeText'],
//   },
// };

const PROJECTS_DATA = [
  {
    id: 0,
    image: projectImagePlaceholder,
    altText: 'MGH Daily Schedule',
    title: 'MGH Daily Schedule',
    description:
      'Shows night/day shift daily schedules as well as the monthly schedule.  Information is gathered through a MySQL database and allowed users can post and/or update both daily and monthly schedules.  The live-demo utilizes an example database for showcasing and to maintain HIPAA.',
    tags: [
      JavaScriptIcon,
      TypeScriptIcon,
      ReactIcon,
      SassIcon,
      NodeJSIcon,
      MySQLIcon,
    ],
    gitHubPath: 'https://github.com/AndrewKohn/mgh-daily-schedule',
    liveSitePath: '',
    moreInfo: {
      purpose: [
        'The main purpose of this project is to display a daily schedule for providing care to patients.',
        'Originally conceived as a way to practice working with a relational database, this project has evolved into a centralized solution to reduce confusion among staff regarding constantly changing patient schedules.',
        'By offering a centralized and up-to-date version of the schedule that can be easily updated on-the-go, this project aims to simplify the task of managing patient care, especially for new staff members.',
        'In addition, the monthly scheduling sheet provides an at-a-glance overview for staff and enables nurses to make quick adjustments as needed.',
      ],
      functionality: [
        'This project seamlessly retrieves and displays data from a MySQL database in a well-organized and user-friendly format.',
        'Administrative users have the ability to efficiently manage and manipulate schedules.',
        "The daily schedule presents patients' hourly ADLs (Activities of Daily Living), offering the flexibility to highlight specific houses and shifts for comprehensive viewing.",
        'The monthly schedule provides a convenient calendar view that highlights different houses and shift times, facilitating efficient staff scheduling across multiple facilities.',
      ],
      challenge: [
        'During the project, the main challenge was retrieving data from the database, which was not functioning correctly. It was discovered that resetting the MySQL server through Windows Services was necessary.',
      ],
    },
  },
  {
    id: 1,
    image: projectImage1,
    altText: 'Payroll Report Sorter App',
    title: 'Payroll Report Sorter',
    description:
      "A personal program to sort staff's time-clocks in payroll reports between multiple facilities.",
    tags: [JavaIcon],
    gitHubPath: 'https://github.com/AndrewKohn/PayrollReportSorter',
    liveSitePath: '',
    moreInfo: {
      purpose: [
        'The primary purpose of this program is to consolidate multiple PDF files into a single .txt file, organizing staff hours by the facility they worked at.',
        'By automatically detecting discrepancies in clock-in or clock-out times, the program generates a comprehensive report that highlights missing times as separate sections. This allows for easy identification of staff members who were scheduled to work on a specific day or forgot to clock out.',
      ],
      functionality: [
        'This program efficiently merges PDF reports generated by the MGH charting system into a convenient .txt file.',
        "Users can conveniently view staff hours worked and the respective facility. In case of errors, such as a missed clock-out, the program displays the information below the staff member's name.",
      ],
      challenge: [
        'One of the main challenges of this project was parsing data from PDF files, which required utilizing tools like pdfBox.',
        'This project introduced me to the use of ArrayLists and maps, allowing for efficient storage and retrieval of information in a user-friendly format.',
      ],
    },
  },
  {
    id: 2,
    image: projectImage5,
    altText: 'OpenAI Discord Chatbot',
    title: 'OpenAI Discord Chatbot',
    description:
      "A ChatGPT discord chatbot utilizing OpenAI's API with the ability to converse with multiple users within the server's channel & can respond to DM's.  To make it a bit interesting, the chatbot is role-playing as a caveman that values family-values and he also works in a call center for ChatGPT in the US.",
    tags: [JavaScriptIcon, NodeJSIcon],
    gitHubPath: 'https://github.com/AndrewKohn/gpt-discord-bot',
    liveSitePath: 'https://discord.com/invite/c27D5CXkA5',
    moreInfo: {
      purpose: [
        'The purpose of this project is to create a ChatGPT bot for Discord, providing users with a convenient utility of OpenAI when they are away from their desktop or laptop. It enables users to ask questions on-the-go and display answers and solutions while the user returns to their computer.',
      ],
      functionality: [
        "Users can engage in interactive and dynamic conversations with OpenAI's ChatGPT API.",
        'Users can send and receive direct messages, allowing for private and personalized interactions.',
        'The chatbot maintains separate conversations between multiple users, ensuring that it stays focused on the topic at hand without being influenced by other users.',
      ],
      challenge: [
        "One issue I had was a relatively quick-fix, but it involved having the chatbot be able to read and store past conversations.  The issue was that it won't differentiate between different users, and will continue a conversation branch based on the past questions regardless of who asked them.  The fix I included into the code involved stopping the chatbot from responding if the author of the message is either not a bot itself, or if the current author of the current question is the same as the previous author of the previous question, then it will check the chat history until a certain amount of submissions by the current author has been reached.",
      ],
    },
  },
  {
    id: 3,
    image: projectImage3,
    altText: 'Monster Hunter Discord Bot',
    title: 'MH Weakener Bot',
    description:
      "A discord bot that shows a brief overview of a monster's location, resistances, and weaknesses and any special conditions, if any.  Allows user and friends to be on the same page and to quickly optimize for a fight.",
    tags: [JavaScriptIcon, NodeJSIcon],
    gitHubPath: 'https://github.com/AndrewKohn/mh-weakener-discord-bot',
    liveSitePath: 'https://discord.com/invite/S5kHXjZfjJ',
    moreInfo: {
      purpose: [
        "The project is a Discord bot designed to provide users with a brief overview of a monster's location, resistances, weaknesses, and any special conditions that may be applicable during a fight. The purpose of the bot is to help users and their friends to quickly optimize their strategy for taking down the monster.",
        'The bot uses an API from https://mhw-db.com to retrieve information about the monsters. This information is then presented to the user in a clear and concise manner through the Discord bot.',
        'The bot may include various features that allow users to interact with it, such as using commands to search for specific monsters or filter by attributes such as location or resistance type. Additionally, the bot may allow users to save or share information about specific monsters with their friends, helping everyone to stay on the same page and work together more effectively.',
        'Overall, this project is a great example of how technology can be used to make gaming more enjoyable and collaborative. By providing users with the information they need to optimize their strategy, the bot can help them to achieve greater success and have more fun playing together.',
      ],
      functionality: [
        'The bot retrieves information about monsters, including their location, resistances, weaknesses, and special conditions, from a data source.',
        'Users can interact with the bot through commands to search for specific monsters.',
        'The bot presents the information about the monster in a clear and concise manner, allowing users to quickly optimize their strategy for taking down the monster.',
        'The bot can help users to easily access and share information, making it a useful tool for gamers who want to collaborate and strategize together.',
      ],
      challenge: [
        "A challenge I encountered was learning how to host the bot.  I ended up learning how to use Heroku's services and the Discord bot was properly working on different Discord channels.",
      ],
    },
  },
  {
    id: 4,
    image: projectImage2,
    altText: 'PDF to Word Converter App',
    title: 'PDF Word Converter',
    description:
      'A program that converts pdf/docx files while maintaining proper formatting.  Used to help with work involving editing .pdf files from time-to-time.',
    tags: [JavaIcon],
    gitHubPath: 'https://github.com/AndrewKohn/PDFWordConverter',
    liveSitePath: '',
    moreInfo: {
      purpose: [
        'This is a program that is designed to convert files between two formats: PDF and DOCX',
        "The goal of the program is to make it easy to edit PDF files, which can be difficult to modify without the right tools. By converting PDF files to DOCX format, the program allows you to make changes to the document using a word processor like Microsoft Word or Google Docs, and then save the changes back to PDF format when you're done.",
        'One of the key features of this program is that it maintains the proper formatting of the original file during the conversion process. This is important because many PDF files are complex documents that include images, charts, and other elements that can be difficult to re-create in a different format. By preserving the original formatting, this program makes it easy to edit the document without losing any of the visual elements that make it unique.',
      ],
      functionality: [
        'The program allows users to easily convert PDF files to DOCX files and vice versa while preserving the formatting of the original document. Users can simply select the file they wish to convert and the program will handle the rest of the conversion process. The resulting document will have the same layout, fonts, and formatting as the original document, making it easy for users to edit and work with the document in their preferred format.',
      ],
      challenge: [
        "One issue I had properly using the API.  There wasn't much information on StackOverflow so I spent some time studying its documentation.",
      ],
    },
  },
  {
    id: 5,
    image: projectImage4,
    altText: 'Morning Glory Homes menu site',
    title: 'MGH Menu',
    description:
      'This project allows the user to view/submit weekly menus. The live demo utilizes example menus for its showcasing.',
    tags: [HtmlIcon, CssIcon, JavaScriptIcon],
    gitHubPath: 'https://github.com/AndrewKohn/MGH-menu',
    liveSitePath: 'https://mghmenu.netlify.app/',
    moreInfo: {
      purpose: [
        'The menus at the facilities were originally written on paper and it got harder and harder to keep track of keeping the fridges and freezers stocked when everyone has a different idea for the meals to prepare each day.',
        'This was an early project I used to practice vanilla JavaScript.  Allows the user to submit a form that emails a JSON version of a new menu that can essentially be plugged into the code and displays the new menu.',
        'Menus for each facility is require by the state and they also assist with planning diet and ensuring not too much money was being spent buying too much of one ingredient.',
      ],
      functionality: [
        'Displays different types of menus.',
        'Dynamically changes class for hover effects.',
        'Users can submit new menus, or suggest portions of a menu, which is recieved in JSON and can be copy/pasted to create a new menu quickly.',
      ],
      challenge: [
        'This project helped me understand using js to manipulate the css styling.',
        'A challenge I faced was trying to bring the idea to life of trying to update the menu with new information, but I had to figure out how to remove elements already present in the document.',
      ],
    },
  },
];

export default PROJECTS_DATA;
